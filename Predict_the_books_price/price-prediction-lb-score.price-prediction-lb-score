{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"![](https://machinehack-be.s3.amazonaws.com/predict_the_price_of_books/gregory-culmer-e8ThqioFqgs-unsplash-460x307.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAI2O7AQTB6JBT4VSA%2F20200803%2Fap-south-1%2Fs3%2Faws4_request&X-Amz-Date=20200803T180002Z&X-Amz-Expires=172800&X-Amz-SignedHeaders=host&X-Amz-Signature=b74ba1b23c8423c775855c08f56f642f068f6d4f61a247963efa77afdea41bf6)","metadata":{}},{"cell_type":"markdown","source":"# Machine Hack\n\n## Overview\n\nThe so-called paradoxes of an author, to which a reader takes exception, often exist not in the author's book at all, but rather in the reader's head. - Friedrich Nietzsche Books are open doors to the unimagined worlds which is unique to every person. It is more than just a hobby for many. There are many among us who prefer to spend more time with books than anything else. Here we explore a big database of books. Books of different genres, from thousands of authors. In this challenge, participants are required to use the dataset to build a Machine Learning model to predict the price of books based on a given set of features. Size of training set: 6237 records Size of test set: 1560 records FEATURES: Title: The title of the book Author: The author(s) of the book. Edition: The edition of the book eg (Paperback,â€“ Import, 26 Apr 2018) Reviews: The customer reviews about the book Ratings: The customer ratings of the book Synopsis: The synopsis of the book Genre: The genre the book belongs to BookCategory: The department the book is usually available at. Price: The price of the book (Target variable)","metadata":{"trusted":true}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2021-11-08T15:49:25.541796Z","iopub.execute_input":"2021-11-08T15:49:25.542458Z","iopub.status.idle":"2021-11-08T15:49:25.556433Z","shell.execute_reply.started":"2021-11-08T15:49:25.542418Z","shell.execute_reply":"2021-11-08T15:49:25.555627Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"# Import useful libraries\n\nimport time\nimport re\nimport string\nfrom numpy import mean\n\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, HashingVectorizer\nfrom sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import mean_squared_log_error, make_scorer, mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.naive_bayes import MultinomialNB\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\n\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:25.557846Z","iopub.execute_input":"2021-11-08T15:49:25.558326Z","iopub.status.idle":"2021-11-08T15:49:27.740798Z","shell.execute_reply.started":"2021-11-08T15:49:25.558295Z","shell.execute_reply":"2021-11-08T15:49:27.739847Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"# Read dataset\n\ntrain_data = pd.read_excel('/kaggle/input/predict-book-prices/train.xlsx')\ntest_data = pd.read_excel('/kaggle/input/predict-book-prices/test.xlsx')\nsample_submission = pd.read_excel('/kaggle/input/predict-book-prices/sample_submission.xlsx')\ntrain_data.columns = train_data.columns.str.lower().str.strip().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\ntest_data.columns = test_data.columns.str.lower().str.strip().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')","metadata":{"_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","execution":{"iopub.status.busy":"2021-11-08T15:49:27.742100Z","iopub.execute_input":"2021-11-08T15:49:27.742415Z","iopub.status.idle":"2021-11-08T15:49:29.763648Z","shell.execute_reply.started":"2021-11-08T15:49:27.742386Z","shell.execute_reply":"2021-11-08T15:49:29.762840Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"print('Train Data Shape: ', train_data.shape)\nprint('Test Data Shape: ', test_data.shape)\ntrain_data.head()","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:29.764966Z","iopub.execute_input":"2021-11-08T15:49:29.765595Z","iopub.status.idle":"2021-11-08T15:49:29.796378Z","shell.execute_reply.started":"2021-11-08T15:49:29.765550Z","shell.execute_reply":"2021-11-08T15:49:29.795115Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"train_data.nunique()","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:29.798869Z","iopub.execute_input":"2021-11-08T15:49:29.799321Z","iopub.status.idle":"2021-11-08T15:49:29.848998Z","shell.execute_reply.started":"2021-11-08T15:49:29.799289Z","shell.execute_reply":"2021-11-08T15:49:29.848098Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# Merge the training set and test set\n\npd.set_option('display.max_rows', 200)\ntrain_data['type'] = 'train'\ntest_data['type'] = 'test'\nmaster_data = pd.concat([train_data, test_data])\nunique_titles = pd.DataFrame(master_data.title.unique()).reset_index()\nunique_titles.columns = ['id', 'title']\nmaster_data = master_data.merge(unique_titles, on = 'title', how = 'left')\n#master_data = master_data.sort_values(by = ['id'], ascending = [True])\nmaster_data.head()","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:29.850879Z","iopub.execute_input":"2021-11-08T15:49:29.851320Z","iopub.status.idle":"2021-11-08T15:49:29.906798Z","shell.execute_reply.started":"2021-11-08T15:49:29.851290Z","shell.execute_reply":"2021-11-08T15:49:29.906047Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":"## Data cleaning and feature creation","metadata":{}},{"cell_type":"code","source":"# Reviews handling\n\nmaster_data['reviews'] = master_data['reviews'].apply(lambda x: x.split(' ')[0])\nmaster_data['reviews'] = master_data['reviews'].astype(np.float16)","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:29.908047Z","iopub.execute_input":"2021-11-08T15:49:29.908539Z","iopub.status.idle":"2021-11-08T15:49:29.922040Z","shell.execute_reply.started":"2021-11-08T15:49:29.908507Z","shell.execute_reply":"2021-11-08T15:49:29.921108Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# Ratings handling\n\nmaster_data['ratings'] = master_data['ratings'].apply(lambda x: x.split(' ')[0])\nmaster_data['ratings'] = master_data['ratings'].apply(lambda x: int(x.replace(',', '')))","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:29.923397Z","iopub.execute_input":"2021-11-08T15:49:29.923788Z","iopub.status.idle":"2021-11-08T15:49:29.951445Z","shell.execute_reply.started":"2021-11-08T15:49:29.923757Z","shell.execute_reply":"2021-11-08T15:49:29.950347Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"# Publication year and age of editions\n\nmaster_data['year'] = master_data['edition'].str[-4:]\n\n# Random publication year for some books\nmaster_data['year'] = master_data['year'].apply(lambda x: re.sub(\"[^0-9]\", 'NA', x))\nmaster_data['year'] = master_data['year'].apply(lambda x: x.replace('NA', '0'))\nmaster_data['year'] = master_data['year'].astype(np.int16)\n\nmaster_data['age'] = 2019 - master_data['year']\n\nmaster_data.loc[(master_data['year'] == 0), 'year'] = np.NaN\navg_age = master_data['age'].mean()\nmaster_data.loc[(master_data['year'].isnull()), 'age'] = avg_age\n\nmaster_data.head()","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:29.952879Z","iopub.execute_input":"2021-11-08T15:49:29.953240Z","iopub.status.idle":"2021-11-08T15:49:30.015642Z","shell.execute_reply.started":"2021-11-08T15:49:29.953208Z","shell.execute_reply":"2021-11-08T15:49:30.014251Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"### NLTK library to remove stopwords","metadata":{}},{"cell_type":"code","source":"# loading stop words from nltk library\n\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))\n\ndef nlp_preprocessing(total_text):\n    if type(total_text) is not int:\n        string = \"\"\n        for word in total_text.split():\n        # if the word is a not a stop word then retain that word from the data\n            if not word in stop_words:\n                string += word + \" \"\n        \n    return string","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:30.016809Z","iopub.execute_input":"2021-11-08T15:49:30.017158Z","iopub.status.idle":"2021-11-08T15:49:31.039741Z","shell.execute_reply.started":"2021-11-08T15:49:30.017127Z","shell.execute_reply":"2021-11-08T15:49:31.038513Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"# text processing - remove stop words\n\nstart_time = time.process_time()\nfor column in ['title', 'author', 'edition', 'synopsis', 'genre', 'bookcategory']:\n    master_data[column] = master_data[column].apply(lambda x: nlp_preprocessing(x))\n    master_data[column] = master_data[column].str.lower()\n    master_data[column] = master_data[column].astype(str).apply(lambda x : re.sub(\"[^A-Za-z]\",\" \",x))\n    master_data[column] = master_data[column].apply(lambda x:''.join([i for i in x if i not in string.punctuation]))\nprint('Time took for preprocessing the text :',time.process_time() - start_time, \"seconds\")","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:31.041490Z","iopub.execute_input":"2021-11-08T15:49:31.041860Z","iopub.status.idle":"2021-11-08T15:49:33.445947Z","shell.execute_reply.started":"2021-11-08T15:49:31.041827Z","shell.execute_reply":"2021-11-08T15:49:33.445047Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"# Both genre and bookcategory columns have categorized structure\n\nmaster_data['genre'] = master_data['genre'].map(master_data['genre'].value_counts())\nmaster_data['bookcategory'] = master_data['bookcategory'].map(master_data['bookcategory'].value_counts())","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:33.447504Z","iopub.execute_input":"2021-11-08T15:49:33.447910Z","iopub.status.idle":"2021-11-08T15:49:33.468555Z","shell.execute_reply.started":"2021-11-08T15:49:33.447865Z","shell.execute_reply":"2021-11-08T15:49:33.467368Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":"#### Create features for Binding and Imported versions","metadata":{}},{"cell_type":"code","source":"# Create features for Binding and Imported versions \n\nmaster_data['binding'] = master_data['edition'].apply(lambda x: np.where('paperback' in x, -1, 1))\nmaster_data['imported'] = master_data['edition'].apply(lambda x: np.where('import' in x, 1, -1))\nmaster_data['synopsis'] = master_data['synopsis'] + \" \" + master_data['title']\nmaster_data = master_data.drop(['title'], axis = 1)","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:33.470408Z","iopub.execute_input":"2021-11-08T15:49:33.470773Z","iopub.status.idle":"2021-11-08T15:49:33.559817Z","shell.execute_reply.started":"2021-11-08T15:49:33.470742Z","shell.execute_reply":"2021-11-08T15:49:33.558985Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# Separate train and test data\n\ntrain_data = master_data.loc[master_data['type'] == 'train']\ntest_data = master_data.loc[master_data['type'] == 'test']\n\ntrain_data = train_data.drop(['id', 'type', 'author', 'edition'], axis = 1)\ntest_data = test_data.drop(['id', 'price', 'type', 'author', 'edition'], axis = 1)\ntrain_data.head()","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:33.560874Z","iopub.execute_input":"2021-11-08T15:49:33.561226Z","iopub.status.idle":"2021-11-08T15:49:33.588429Z","shell.execute_reply.started":"2021-11-08T15:49:33.561198Z","shell.execute_reply":"2021-11-08T15:49:33.587551Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":"### Model training","metadata":{}},{"cell_type":"code","source":"X = train_data.drop(['price'],axis = 1)\ny = train_data['price']\ny = np.log1p(y)\n\n# Split the data\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 22)","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:33.589832Z","iopub.execute_input":"2021-11-08T15:49:33.590171Z","iopub.status.idle":"2021-11-08T15:49:33.601738Z","shell.execute_reply.started":"2021-11-08T15:49:33.590141Z","shell.execute_reply":"2021-11-08T15:49:33.600595Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":"#### Function Transformer for handling numerical and categorical features saparately","metadata":{}},{"cell_type":"code","source":"get_numeric_data = FunctionTransformer(lambda x: x[['reviews','ratings','genre', 'bookcategory','binding','year']], validate = False)\nget_text_data = FunctionTransformer(lambda x: x['synopsis'],validate = False)","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:33.603525Z","iopub.execute_input":"2021-11-08T15:49:33.604027Z","iopub.status.idle":"2021-11-08T15:49:33.609687Z","shell.execute_reply.started":"2021-11-08T15:49:33.603967Z","shell.execute_reply":"2021-11-08T15:49:33.608670Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":"#### Pipeline for linear sequence of data transforms to be chained together","metadata":{}},{"cell_type":"code","source":"numeric_pipeline = Pipeline([('selector', get_numeric_data),])\ntext_pipeline = Pipeline([('selector', get_text_data), ('vectorizer', CountVectorizer()),])","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:33.610861Z","iopub.execute_input":"2021-11-08T15:49:33.611381Z","iopub.status.idle":"2021-11-08T15:49:33.622133Z","shell.execute_reply.started":"2021-11-08T15:49:33.611341Z","shell.execute_reply":"2021-11-08T15:49:33.621008Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":"### LGBM Regressor: Model parameters for gridsearch","metadata":{}},{"cell_type":"code","source":"params = {\n    'clf__n_estimators' : [100, 200],\n    #'clf__max_depth' : [3,4,5,6,7],\n    'clf__learning_rate': [0.01, 0.1, 0.01],\n    'clf__reg_lambda': list(np.arange(0.1, 0.9, 0.1)),\n    #'clf__colsample_bytree' : list(np.arange(0.1,0.8,0.1)),\n    'clf__importance_type': ['gain', 'weight', 'cover', 'total_gain', 'total_cover'],\n    'clf__booster': ['gbtree', 'gblinear', 'dart']\n}","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:33.623364Z","iopub.execute_input":"2021-11-08T15:49:33.623839Z","iopub.status.idle":"2021-11-08T15:49:33.634565Z","shell.execute_reply.started":"2021-11-08T15:49:33.623793Z","shell.execute_reply":"2021-11-08T15:49:33.633596Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"pipeline = Pipeline([('union', FeatureUnion([('numeric', numeric_pipeline), ('text', text_pipeline)])),\n               ('clf', LGBMRegressor(verbosity = 1, objective = 'regression'))])","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:33.635779Z","iopub.execute_input":"2021-11-08T15:49:33.636087Z","iopub.status.idle":"2021-11-08T15:49:33.646830Z","shell.execute_reply.started":"2021-11-08T15:49:33.636058Z","shell.execute_reply":"2021-11-08T15:49:33.645754Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":"#### Custom scoring method","metadata":{}},{"cell_type":"code","source":"def get_score(y_val, y_pred):\n    return np.sqrt(mean_squared_log_error(y_pred, y_val))\n    \ncriteria = make_scorer(get_score, greater_is_better = False)\ngrid = RandomizedSearchCV(pipeline, param_distributions = params, n_iter = 15, cv = 5, scoring = criteria)\ngrid.fit(X_train, y_train)\nprint(grid.best_params_)\nprint('Best Score: ', grid.best_score_)","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:49:33.648541Z","iopub.execute_input":"2021-11-08T15:49:33.648848Z","iopub.status.idle":"2021-11-08T15:54:10.004648Z","shell.execute_reply.started":"2021-11-08T15:49:33.648820Z","shell.execute_reply":"2021-11-08T15:54:10.003671Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":"### make predictions on validation data","metadata":{}},{"cell_type":"code","source":"y_preds = grid.predict(X_test)\nprint('Mean Squared Error: ', mean_squared_error(y_preds, y_test))\n\nprint('Validation set score: ', 1 - np.sqrt(np.square(np.log10(y_preds +1) - np.log10(y_test +1)).mean()))","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:54:10.006107Z","iopub.execute_input":"2021-11-08T15:54:10.006669Z","iopub.status.idle":"2021-11-08T15:54:10.279010Z","shell.execute_reply.started":"2021-11-08T15:54:10.006627Z","shell.execute_reply":"2021-11-08T15:54:10.278014Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"markdown","source":"### Model fitting and submission","metadata":{}},{"cell_type":"code","source":"grid.fit(X, y)\nPreds = np.expm1(grid.predict(test_data))\nsubmission = pd.DataFrame({'Price': Preds})\nsubmission['Price'] = Preds\nsubmission.head(10)","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:54:10.280446Z","iopub.execute_input":"2021-11-08T15:54:10.281019Z","iopub.status.idle":"2021-11-08T15:59:52.237778Z","shell.execute_reply.started":"2021-11-08T15:54:10.280960Z","shell.execute_reply":"2021-11-08T15:59:52.236350Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"submission.to_excel('submission_v2.xlsx', index = False)","metadata":{"execution":{"iopub.status.busy":"2021-11-08T15:59:52.240243Z","iopub.execute_input":"2021-11-08T15:59:52.240696Z","iopub.status.idle":"2021-11-08T15:59:52.391480Z","shell.execute_reply.started":"2021-11-08T15:59:52.240653Z","shell.execute_reply":"2021-11-08T15:59:52.390474Z"},"trusted":true},"execution_count":23,"outputs":[]}]}